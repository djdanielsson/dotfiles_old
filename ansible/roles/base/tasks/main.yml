---
# tasks file for base
- include: fedora.yml
  when: ansible_distribution == "Fedora"

- name: install the latest packages
  become: true
  ansible.builtin.package:
    name: "{{ item }}"
    state: latest
  loop: "{{ packages }}"

- name: creating workspace
  ansible.builtin.file:
    path: "{{ home_dir }}workspace"
    state: directory
    mode: 0750

- name: git pull dotfiles
  ansible.builtin.git:
    repo: 'https://github.com/djdanielsson/dotfiles.git'
    dest: "{{ home_dir }}workspace/dotfiles"
    update: false

- name: create .local/share folder
  ansible.builtin.file:
    path: "{{ home_dir }}.local/share/"
    state: directory
    mode: 0750

- name: git pull Vundle
  ansible.builtin.git:
    repo: 'https://github.com/gmarik/Vundle.vim.git'
    dest: "{{ home_dir }}.vim/bundle/Vundle.vim"

- name: checking to see if oh-my-zsh is already installed
  ansible.builtin.stat:
    path: "{{ home_dir }}.oh-my-zsh"
  register: DLohmyzsh

- name: downloading the installer for oh-my-zsh
  ansible.builtin.get_url:
    url: https://raw.githubusercontent.com/robbyrussell/oh-my-zsh/master/tools/install.sh
    dest: "{{ home_dir }}ohmyzsh.sh"
    mode: 0750
  when: DLohmyzsh.stat.islnk is not defined

- name: checking for oh-my-zsh installer
  ansible.builtin.stat:
    path: "{{ home_dir }}ohmyzsh.sh"
  register: ohmyzsh

- name: Installing oh-my-zsh
  ansible.builtin.command: "/usr/bin/bash {{ home_dir }}ohmyzsh.sh"
  when: ohmyzsh.stat.islnk is defined

- name: removing oh-my-zsh installer
  ansible.builtin.file:
    path: "{{ home_dir }}ohmyzsh.sh"
    state: absent

- name: checking for .vimrc
  ansible.builtin.stat:
    path: "{{ home_dir }}.vimrc"
  register: vimrc

- name: making sure .vimrc is symlink
  ansible.builtin.file:
    path: "{{ home_dir }}.vimrc"
    state: absent
  when: vimrc.stat.islnk is defined and vimrc.stat.islnk == False

- name: creating symlink .vimrc
  ansible.builtin.file:
    src: "{{ home_dir }}workspace/dotfiles/.vimrc"
    dest: "{{ home_dir }}.vimrc"
    state: link

- name: Run the vim command to install/update plugins
  ansible.builtin.command: /usr/bin/vim +PluginInstall +qall
  async: 120
  poll: 5
  failed_when: failed is defined

- name: checking for .bashrc
  ansible.builtin.stat:
    path: "{{ home_dir }}.bashrc"
  register: bashrc

- name: making sure .bashrc is symlink
  ansible.builtin.file:
    path: "{{ home_dir }}.bashrc"
    state: absent
  when: bashrc.stat.islnk is defined and bashrc.stat.islnk == False

- name: creating symlink .bashrc
  ansible.builtin.file:
    src: "{{ home_dir }}workspace/dotfiles/.bashrc"
    dest: "{{ home_dir }}.bashrc"
    state: link

- name: checking for dunst
  ansible.builtin.stat:
    path: "{{ home_dir }}.config/dunst/dunstrc"
  register: dunstrc

- name: creating directory
  ansible.builtin.file:
    path: "{{ home_dir }}.config/dunst/dunstrc"
    state: directory
  when: dunstrc.stat.exists == False

- name: making sure dunstrc is symlink
  ansible.builtin.file:
    path: "{{ home_dir }}.config/dunst/dunstrc"
    state: absent
  when: dunstrc.stat.islnk is defined and dunstrc.stat.islnk == False

- name: creating symlink dunst
  ansible.builtin.file:
    src: "{{ home_dir }}workspace/dotfiles/dunstrc"
    dest: "{{ home_dir }}.config/dunst/dunstrc"
    state: link

- name: checking for .zshrc
  ansible.builtin.stat:
    path: "{{ home_dir }}.zshrc"
  register: zshrc

- name: making sure .zshrc is symlink
  ansible.builtin.file:
    path: "{{ home_dir }}.zshrc"
    state: absent
  when: zshrc.stat.islnk is defined and zshrc.stat.islnk == False

- name: creating symlink .zsh
  ansible.builtin.file:
    src: "{{ home_dir }}workspace/dotfiles/.zshrc"
    dest: "{{ home_dir }}.zshrc"
    state: link

- name: replacing solarized.vim theme to custom
  ansible.builtin.template:
    src: templates/solarized.vim.j2
    dest: "{{ home_dir }}.vim/bundle/vim-airline-themes/autoload/airline/themes/solarized.vim"
    mode: 0750

...
